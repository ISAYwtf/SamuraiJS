{"version":3,"sources":["utils/validators/validators.js","components/Login/Login.module.css","components/Login/Login.jsx"],"names":["required","value","maxLengthCreator","maxLength","length","composeValidators","validators","reduce","error","validator","undefined","module","exports","LoginFormRedux","reduxForm","form","handleSubmit","captchaUrl","className","classes","onSubmit","field","placeholder","name","validate","component","Input","type","rememberMe","captcha","src","mapDispatchToProps","login","connect","state","isAuth","getIsAuth","getAuthCaptcha","to","formTitle","formData","email","password"],"mappings":"wGAAA,sGAAO,IAAMA,EAAW,SAAAC,GACpB,IAAIA,EAEJ,MAAO,qBAGEC,EAAmB,SAAAC,GAAS,OAAI,SAAAF,GACzC,GAAIA,GAASA,EAAMG,OAASD,EAAW,MAAM,iBAAN,OAAwBA,EAAxB,cAK9BE,EAAoB,sCAAIC,EAAJ,yBAAIA,EAAJ,uBAAmB,SAAAL,GAAK,OACrDK,EAAWC,QAAO,SAACC,EAAOC,GAAR,OAAsBD,GAASC,EAAUR,UAAQS,M,oBCZvEC,EAAOC,QAAU,CAAC,UAAY,yBAAyB,KAAO,oBAAoB,MAAQ,qBAAqB,MAAQ,qBAAqB,QAAU,uBAAuB,WAAa,4B,uJCwCpLC,EAAiBC,YAAU,CAACC,KAAM,SAAjBD,EA9BL,SAAC,GAAD,IAAEE,EAAF,EAAEA,aAAcC,EAAhB,EAAgBA,WAAYT,EAA5B,EAA4BA,MAA5B,OACd,uBAAMU,UAAWC,IAAQJ,KAAMK,SAAUJ,EAAzC,UACI,qBAAKE,UAAWC,IAAQE,MAAxB,SACI,cAAC,IAAD,CAAOC,YAAa,QAASC,KAAM,QAC5BC,SAAU,CAACxB,KAAWyB,UAAWC,QAE5C,qBAAKR,UAAWC,IAAQE,MAAxB,SACI,cAAC,IAAD,CAAOM,KAAK,WAAWL,YAAa,WAAYC,KAAM,WAC/CC,SAAU,CAACxB,KACXyB,UAAWC,QAEtB,wBAAOR,UAAWC,IAAQS,WAA1B,UACI,cAAC,IAAD,CAAOH,UAAWC,IAAOH,KAAM,aAAcI,KAAM,aACnD,+CAEHV,EACK,sBAAKC,UAAWC,IAAQU,QAAxB,UACE,qBAAKC,IAAKb,IACV,cAAC,IAAD,CAAOQ,UAAWC,IAAOJ,YAAa,+BAAgCC,KAAM,eAE9E,GACLf,EACK,qBAAKU,UAAWC,IAAQX,MAAxB,SAAgCA,IAChC,GAEN,8BACI,cAAC,IAAD,4BA6BNuB,EAAqB,CACvBC,WAGWC,uBATS,SAAAC,GAAK,MAAK,CAC9BC,OAAQC,YAAUF,GAClBjB,WAAYoB,YAAeH,MAOSH,EAAzBE,EA3BD,SAAC,GAAiC,IAAhCD,EAA+B,EAA/BA,MAAOG,EAAwB,EAAxBA,OAAQlB,EAAgB,EAAhBA,WAM3B,OAAIkB,EACO,cAAC,IAAD,CAAUG,GAAI,aAIrB,gCACI,oBAAIpB,UAAWC,IAAQoB,UAAvB,qBACA,cAAC1B,EAAD,CAAgBO,SAZL,SAAAoB,GAAa,IACrBC,EAAwCD,EAAxCC,MAAOC,EAAiCF,EAAjCE,SAAUd,EAAuBY,EAAvBZ,WAAYC,EAAWW,EAAXX,QACpCG,EAAMS,EAAOC,EAAUd,EAAYC,IAUOZ,WAAYA","file":"static/js/6.6c06a3fa.chunk.js","sourcesContent":["export const required = value => {\r\n    if (value) return undefined;\r\n\r\n    return \"Field is required\";\r\n}\r\n\r\nexport const maxLengthCreator = maxLength => value => {\r\n    if (value && value.length > maxLength) return `Max length is ${maxLength} symbols`;\r\n\r\n    return undefined;\r\n}\r\n\r\nexport const composeValidators = (...validators) => value =>\r\n    validators.reduce((error, validator) => error || validator(value), undefined);\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formTitle\":\"Login_formTitle__2YcqO\",\"form\":\"Login_form__13Jmx\",\"field\":\"Login_field__1lrSK\",\"error\":\"Login_error__28wyR\",\"captcha\":\"Login_captcha__2og02\",\"rememberMe\":\"Login_rememberMe__3ztC7\"};","import React from \"react\";\r\nimport {Input} from \"../common/FormControls/FormControls\";\r\nimport {required} from \"../../utils/validators/validators\";\r\nimport {connect} from \"react-redux\";\r\nimport {login} from \"../../redux/Auth/auth-reducer\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport classes from \"./Login.module.css\";\r\nimport Button from \"../common/Button\";\r\nimport {reduxForm, Field} from \"redux-form\";\r\nimport {getAuthCaptcha, getIsAuth} from \"../../redux/Auth/auth-selectors\";\r\n\r\nconst LoginForm = ({handleSubmit, captchaUrl, error}) =>\r\n    <form className={classes.form} onSubmit={handleSubmit}>\r\n        <div className={classes.field}>\r\n            <Field placeholder={\"Email\"} name={\"email\"}\r\n                   validate={[required]} component={Input}/>\r\n        </div>\r\n        <div className={classes.field}>\r\n            <Field type=\"password\" placeholder={\"Password\"} name={\"password\"}\r\n                   validate={[required]}\r\n                   component={Input}/>\r\n        </div>\r\n        <label className={classes.rememberMe}>\r\n            <Field component={Input} name={\"rememberMe\"} type={\"checkbox\"}/>\r\n            <p>Remember Me</p>\r\n        </label>\r\n        {captchaUrl\r\n            ? <div className={classes.captcha}>\r\n                <img src={captchaUrl}/>\r\n                <Field component={Input} placeholder={\"Input symbols from the image\"} name={\"captcha\"}/>\r\n            </div>\r\n            : \"\"}\r\n        {error\r\n            ? <div className={classes.error}>{error}</div>\r\n            : \"\"\r\n        }\r\n        <div>\r\n            <Button>Login</Button>\r\n        </div>\r\n    </form>\r\n\r\nconst LoginFormRedux = reduxForm({form: \"login\"})(LoginForm);\r\n\r\nconst Login = ({login, isAuth, captchaUrl}) => {\r\n    const submitData = formData => {\r\n        const {email, password, rememberMe, captcha} = formData;\r\n        login(email, password, rememberMe, captcha);\r\n    }\r\n\r\n    if (isAuth) {\r\n        return <Redirect to={\"/profile\"}/>;\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <h2 className={classes.formTitle}>Sign in</h2>\r\n            <LoginFormRedux onSubmit={submitData} captchaUrl={captchaUrl}/>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    isAuth: getIsAuth(state),\r\n    captchaUrl: getAuthCaptcha(state)\r\n})\r\n\r\nconst mapDispatchToProps = {\r\n    login\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Login);\r\n"],"sourceRoot":""}